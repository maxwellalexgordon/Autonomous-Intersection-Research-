# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intersection/createCarRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class createCarRequest(genpy.Message):
  _md5sum = "cd2b440b511ca1d8964b537e735641de"
  _type = "intersection/createCarRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 check
"""
  __slots__ = ['check']
  _slot_types = ['int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       check

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(createCarRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.check is None:
        self.check = 0
    else:
      self.check = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_q().pack(self.check))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 8
      (self.check,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_q().pack(self.check))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 8
      (self.check,) = _get_struct_q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from intersection/createCarResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class createCarResponse(genpy.Message):
  _md5sum = "17376b3fc48c1885fb019580792ccc11"
  _type = "intersection/createCarResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 vin
float64 speed
float64 accel
int64 enterTime
int64 lane
int64 turn
float64 length
float64 width

"""
  __slots__ = ['vin','speed','accel','enterTime','lane','turn','length','width']
  _slot_types = ['int64','float64','float64','int64','int64','int64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vin,speed,accel,enterTime,lane,turn,length,width

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(createCarResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.vin is None:
        self.vin = 0
      if self.speed is None:
        self.speed = 0.
      if self.accel is None:
        self.accel = 0.
      if self.enterTime is None:
        self.enterTime = 0
      if self.lane is None:
        self.lane = 0
      if self.turn is None:
        self.turn = 0
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
    else:
      self.vin = 0
      self.speed = 0.
      self.accel = 0.
      self.enterTime = 0
      self.lane = 0
      self.turn = 0
      self.length = 0.
      self.width = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q2d3q2d().pack(_x.vin, _x.speed, _x.accel, _x.enterTime, _x.lane, _x.turn, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.vin, _x.speed, _x.accel, _x.enterTime, _x.lane, _x.turn, _x.length, _x.width,) = _get_struct_q2d3q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q2d3q2d().pack(_x.vin, _x.speed, _x.accel, _x.enterTime, _x.lane, _x.turn, _x.length, _x.width))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.vin, _x.speed, _x.accel, _x.enterTime, _x.lane, _x.turn, _x.length, _x.width,) = _get_struct_q2d3q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_q2d3q2d = None
def _get_struct_q2d3q2d():
    global _struct_q2d3q2d
    if _struct_q2d3q2d is None:
        _struct_q2d3q2d = struct.Struct("<q2d3q2d")
    return _struct_q2d3q2d
class createCar(object):
  _type          = 'intersection/createCar'
  _md5sum = '81fafe211a05479f18572c2a83d88d33'
  _request_class  = createCarRequest
  _response_class = createCarResponse
