// Generated by gencpp from file intersection/createCarResponse.msg
// DO NOT EDIT!


#ifndef INTERSECTION_MESSAGE_CREATECARRESPONSE_H
#define INTERSECTION_MESSAGE_CREATECARRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace intersection
{
template <class ContainerAllocator>
struct createCarResponse_
{
  typedef createCarResponse_<ContainerAllocator> Type;

  createCarResponse_()
    : vin(0)
    , speed(0.0)
    , accel(0.0)
    , enterTime(0)
    , lane(0)
    , turn(0)
    , length(0.0)
    , width(0.0)  {
    }
  createCarResponse_(const ContainerAllocator& _alloc)
    : vin(0)
    , speed(0.0)
    , accel(0.0)
    , enterTime(0)
    , lane(0)
    , turn(0)
    , length(0.0)
    , width(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _vin_type;
  _vin_type vin;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _accel_type;
  _accel_type accel;

   typedef int64_t _enterTime_type;
  _enterTime_type enterTime;

   typedef int64_t _lane_type;
  _lane_type lane;

   typedef int64_t _turn_type;
  _turn_type turn;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;





  typedef boost::shared_ptr< ::intersection::createCarResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::intersection::createCarResponse_<ContainerAllocator> const> ConstPtr;

}; // struct createCarResponse_

typedef ::intersection::createCarResponse_<std::allocator<void> > createCarResponse;

typedef boost::shared_ptr< ::intersection::createCarResponse > createCarResponsePtr;
typedef boost::shared_ptr< ::intersection::createCarResponse const> createCarResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::intersection::createCarResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::intersection::createCarResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace intersection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::intersection::createCarResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::intersection::createCarResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intersection::createCarResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::intersection::createCarResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intersection::createCarResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::intersection::createCarResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::intersection::createCarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "17376b3fc48c1885fb019580792ccc11";
  }

  static const char* value(const ::intersection::createCarResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x17376b3fc48c1885ULL;
  static const uint64_t static_value2 = 0xfb019580792ccc11ULL;
};

template<class ContainerAllocator>
struct DataType< ::intersection::createCarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "intersection/createCarResponse";
  }

  static const char* value(const ::intersection::createCarResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::intersection::createCarResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 vin\n"
"float64 speed\n"
"float64 accel\n"
"int64 enterTime\n"
"int64 lane\n"
"int64 turn\n"
"float64 length\n"
"float64 width\n"
"\n"
;
  }

  static const char* value(const ::intersection::createCarResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::intersection::createCarResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vin);
      stream.next(m.speed);
      stream.next(m.accel);
      stream.next(m.enterTime);
      stream.next(m.lane);
      stream.next(m.turn);
      stream.next(m.length);
      stream.next(m.width);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct createCarResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::intersection::createCarResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::intersection::createCarResponse_<ContainerAllocator>& v)
  {
    s << indent << "vin: ";
    Printer<int64_t>::stream(s, indent + "  ", v.vin);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "accel: ";
    Printer<double>::stream(s, indent + "  ", v.accel);
    s << indent << "enterTime: ";
    Printer<int64_t>::stream(s, indent + "  ", v.enterTime);
    s << indent << "lane: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lane);
    s << indent << "turn: ";
    Printer<int64_t>::stream(s, indent + "  ", v.turn);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERSECTION_MESSAGE_CREATECARRESPONSE_H
